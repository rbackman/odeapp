// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "app_fluid.h"

inline void AppFluid::cb_X_i(fltk::Item*, void*) {
  event ( evQuit );
}
void AppFluid::cb_X(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

inline void AppFluid::cb_parmeters_i(fltk::Item*, void*) {
  event ( evEditParameters );
}
void AppFluid::cb_parmeters(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_parmeters_i(o,v);
}

inline void AppFluid::cb_double_i(fltk::Item*, void*) {
  event(evDoubleStance);
}
void AppFluid::cb_double(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_double_i(o,v);
}

inline void AppFluid::cb_left_i(fltk::Item*, void*) {
  event(evLeftStance);
}
void AppFluid::cb_left(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_left_i(o,v);
}

inline void AppFluid::cb_right_i(fltk::Item*, void*) {
  event(evRightStance);
}
void AppFluid::cb_right(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_right_i(o,v);
}

inline void AppFluid::cb_Load_i(fltk::Item*, void*) {
  event(evLoadDefault);
}
void AppFluid::cb_Load(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

inline void AppFluid::cb_Fun_i(fltk::Item*, void*) {
  event(evDropBalls);
}
void AppFluid::cb_Fun(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Fun_i(o,v);
}

inline void AppFluid::cb_ui_useComJ_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_useComJ(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_useComJ_i(o,v);
}

inline void AppFluid::cb_ui_jkp_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_jkp(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jkp_i(o,v);
}

inline void AppFluid::cb_ui_jkd_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_jkd(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jkd_i(o,v);
}

inline void AppFluid::cb_ui_jkpc_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_jkpc(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jkpc_i(o,v);
}

inline void AppFluid::cb_ui_jkdc_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_jkdc(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jkdc_i(o,v);
}

inline void AppFluid::cb_ui_vs_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_vs(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vs_i(o,v);
}

inline void AppFluid::cb_ui_vc_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_vc(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vc_i(o,v);
}

inline void AppFluid::cb_ui_useBubbleT_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_useBubbleT(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_useBubbleT_i(o,v);
}

inline void AppFluid::cb_ui_walk_dir_i(fltk::Dial*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_walk_dir(fltk::Dial* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_walk_dir_i(o,v);
}

inline void AppFluid::cb_ui_walk_i(fltk::LightButton*, void*) {
  event(evWalk);
}
void AppFluid::cb_ui_walk(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_walk_i(o,v);
}

inline void AppFluid::cb_ui_walk_speed_i(fltk::ValueSlider*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_walk_speed(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_walk_speed_i(o,v);
}

inline void AppFluid::cb_ui_arrow_i(fltk::CheckButton*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_arrow(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_arrow_i(o,v);
}

inline void AppFluid::cb_ui_step_dist_i(fltk::ValueSlider*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_step_dist(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_step_dist_i(o,v);
}

inline void AppFluid::cb_ui_step_height_i(fltk::ValueSlider*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_step_height(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_step_height_i(o,v);
}

inline void AppFluid::cb_ui_step_speed_i(fltk::ValueSlider*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_step_speed(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_step_speed_i(o,v);
}

inline void AppFluid::cb_ui_walk_sway_i(fltk::ValueSlider*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_walk_sway(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_walk_sway_i(o,v);
}

inline void AppFluid::cb_ui_walk_hheight_i(fltk::ValueSlider*, void*) {
  event(evWalkAdjust);
}
void AppFluid::cb_ui_walk_hheight(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_walk_hheight_i(o,v);
}

inline void AppFluid::cb_Step_i(fltk::Button*, void*) {
  event(evStartStep);
}
void AppFluid::cb_Step(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Step_i(o,v);
}

inline void AppFluid::cb_ui_useGravC_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_useGravC(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_useGravC_i(o,v);
}

inline void AppFluid::cb_ui_usePID_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_usePID(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_usePID_i(o,v);
}

inline void AppFluid::cb_rest_i(fltk::Button*, void*) {
  event(evRest);
}
void AppFluid::cb_rest(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_rest_i(o,v);
}

inline void AppFluid::cb_ui_kg_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_kg(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kg_i(o,v);
}

inline void AppFluid::cb_ui_collide_feet_only_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_collide_feet_only(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_collide_feet_only_i(o,v);
}

inline void AppFluid::cb_ui_root_manip_i(fltk::CheckButton*, void*) {
  event(evManip);
}
void AppFluid::cb_ui_root_manip(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_root_manip_i(o,v);
}

inline void AppFluid::cb_Left_i(fltk::Button*, void*) {
  event(evLeftStance);
}
void AppFluid::cb_Left(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Left_i(o,v);
}

inline void AppFluid::cb_Right_i(fltk::Button*, void*) {
  event(evRightStance);
}
void AppFluid::cb_Right(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Right_i(o,v);
}

inline void AppFluid::cb_Both_i(fltk::Button*, void*) {
  event(evDoubleStance);
}
void AppFluid::cb_Both(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Both_i(o,v);
}

inline void AppFluid::cb_Toes_i(fltk::Button*, void*) {
  event(evToeStance);
}
void AppFluid::cb_Toes(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Toes_i(o,v);
}

inline void AppFluid::cb_Heel_i(fltk::Button*, void*) {
  event(evHeelStance);
}
void AppFluid::cb_Heel(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Heel_i(o,v);
}

inline void AppFluid::cb_Fixed_i(fltk::Button*, void*) {
  event(evFixedStance);
}
void AppFluid::cb_Fixed(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Fixed_i(o,v);
}

inline void AppFluid::cb_ui_contactVis_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_contactVis(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_contactVis_i(o,v);
}

inline void AppFluid::cb_ui_config_browser_i(fltk::MultiBrowser*, void*) {
  event(evParmListSelected);
}
void AppFluid::cb_ui_config_browser(fltk::MultiBrowser* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_config_browser_i(o,v);
}

inline void AppFluid::cb_save_i(fltk::Button*, void*) {
  event(evSaveParm);
}
void AppFluid::cb_save(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save_i(o,v);
}

inline void AppFluid::cb_update_i(fltk::Button*, void*) {
  event(evUpdateParm);
}
void AppFluid::cb_update(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_update_i(o,v);
}

inline void AppFluid::cb_load_i(fltk::Button*, void*) {
  event(evLoadParm);
}
void AppFluid::cb_load(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load_i(o,v);
}

inline void AppFluid::cb_delete_i(fltk::Button*, void*) {
  event(evDeleteParm);
}
void AppFluid::cb_delete(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete_i(o,v);
}

inline void AppFluid::cb_ui_use_root_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_use_root(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_use_root_i(o,v);
}

inline void AppFluid::cb_ui_root_kp_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_root_kp(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_root_kp_i(o,v);
}

inline void AppFluid::cb_ui_root_kd_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_root_kd(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_root_kd_i(o,v);
}

inline void AppFluid::cb_ui_root_maxV_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_root_maxV(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_root_maxV_i(o,v);
}

inline void AppFluid::cb_ui_root_damp_i(fltk::ValueInput*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_root_damp(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_root_damp_i(o,v);
}

inline void AppFluid::cb_ui_jnt_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt_i(o,v);
}

inline void AppFluid::cb_ui_jnt1_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt1(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt1_i(o,v);
}

inline void AppFluid::cb_ui_jnt2_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt2(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt2_i(o,v);
}

inline void AppFluid::cb_ui_jnt3_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt3(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt3_i(o,v);
}

inline void AppFluid::cb_ui_jnt4_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt4(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt4_i(o,v);
}

inline void AppFluid::cb_ui_jnt5_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt5(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt5_i(o,v);
}

inline void AppFluid::cb_ui_jnt6_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt6(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt6_i(o,v);
}

inline void AppFluid::cb_ui_jnt7_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt7(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt7_i(o,v);
}

inline void AppFluid::cb_ui_jnt8_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt8(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt8_i(o,v);
}

inline void AppFluid::cb_ui_jnt9_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt9(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt9_i(o,v);
}

inline void AppFluid::cb_ui_jnta_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnta(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnta_i(o,v);
}

inline void AppFluid::cb_ui_jntb_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jntb(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jntb_i(o,v);
}

inline void AppFluid::cb_ui_jntc_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jntc(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jntc_i(o,v);
}

inline void AppFluid::cb_ui_jntd_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jntd(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jntd_i(o,v);
}

inline void AppFluid::cb_ui_jnte_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnte(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnte_i(o,v);
}

inline void AppFluid::cb_ui_jntf_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jntf(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jntf_i(o,v);
}

inline void AppFluid::cb_ui_jnt10_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt10(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt10_i(o,v);
}

inline void AppFluid::cb_ui_jnt11_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt11(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt11_i(o,v);
}

inline void AppFluid::cb_ui_jnt12_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt12(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt12_i(o,v);
}

inline void AppFluid::cb_ui_jnt13_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt13(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt13_i(o,v);
}

inline void AppFluid::cb_ui_jnt14_i(fltk::ValueSlider*, void*) {
  event(evSkelAdjust);
}
void AppFluid::cb_ui_jnt14(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jnt14_i(o,v);
}

inline void AppFluid::cb_ui_showSkel_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_showSkel(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showSkel_i(o,v);
}

inline void AppFluid::cb_ui_shaded_i(fltk::CheckButton*, void*) {
  event(evControlMethods);
}
void AppFluid::cb_ui_shaded(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_shaded_i(o,v);
}

inline void AppFluid::cb_ui_jointList_i(fltk::MultiBrowser*, void*) {
  event(evJointListSelect);
}
void AppFluid::cb_ui_jointList(fltk::MultiBrowser* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointList_i(o,v);
}

inline void AppFluid::cb_ui_jointP_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointP(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointP_i(o,v);
}

inline void AppFluid::cb_ui_jointD_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointD(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointD_i(o,v);
}

inline void AppFluid::cb_ui_jointGrav_i(fltk::CheckButton*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointGrav(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointGrav_i(o,v);
}

inline void AppFluid::cb_ui_jointPD_i(fltk::CheckButton*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointPD(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointPD_i(o,v);
}

inline void AppFluid::cb_Save_i(fltk::Button*, void*) {
  event(evSaveConfig);
}
void AppFluid::cb_Save(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

inline void AppFluid::cb_Load1_i(fltk::Button*, void*) {
  event(evLoadConfig);
}
void AppFluid::cb_Load1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Load1_i(o,v);
}

inline void AppFluid::cb_ui_jointVf_i(fltk::CheckButton*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointVf(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointVf_i(o,v);
}

inline void AppFluid::cb_ui_jointJX_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointJX(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointJX_i(o,v);
}

inline void AppFluid::cb_ui_jointJY_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointJY(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointJY_i(o,v);
}

inline void AppFluid::cb_ui_jointJZ_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void AppFluid::cb_ui_jointJZ(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointJZ_i(o,v);
}

inline void AppFluid::cb_ui_ode_run_i(fltk::LightButton*, void*) {
  event(evRunOde);
}
void AppFluid::cb_ui_ode_run(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_ode_run_i(o,v);
}

inline void AppFluid::cb_Reset_i(fltk::Button*, void*) {
  event(evOdeReset);
}
void AppFluid::cb_Reset(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

AppFluid::AppFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_window = new fltk::Window(1442, 820, "Physical Human");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 1438, 820);
      o->begin();
       {AppViewer* o = ui_viewer = new AppViewer(290, 0, 1148, 815);
        o->box(fltk::DOWN_BOX);
        o->color((fltk::Color)0xd3d3d300);
      }
       {fltk::Group* o = ui_main_group = new fltk::Group(0, 0, 285, 820);
        o->set_vertical();
        o->box(fltk::FLAT_BOX);
        o->color((fltk::Color)0x9b9b9b00);
        o->begin();
         {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 20, 285, 40);
          o->box(fltk::DOWN_BOX);
          o->buttonbox(fltk::DOWN_BOX);
          o->color((fltk::Color)0x9d9d9d00);
          o->buttoncolor((fltk::Color)0xc7c7c700);
        }
         {fltk::MenuBar* o = new fltk::MenuBar(13, 0, 272, 20);
          o->color((fltk::Color)0x9b9b9b00);
          o->buttoncolor((fltk::Color)0x9b9b9b00);
          o->highlight_color((fltk::Color)0x9b9b9b00);
          o->shortcut(0xffe9);
          o->begin();
           {fltk::Item* o = new fltk::Item("X");
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->color((fltk::Color)0xece9d800);
            o->textcolor((fltk::Color)0xd40d2900);
            o->selection_textcolor((fltk::Color)0xff122b00);
            o->callback((fltk::Callback*)cb_X);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("draw");
            o->color((fltk::Color)0xece9d800);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("edit");
            o->color((fltk::Color)0xece9d800);
            o->begin();
             {fltk::Item* o = new fltk::Item("parmeters");
              o->callback((fltk::Callback*)cb_parmeters);
            }
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("Char");
            o->begin();
            new fltk::Divider();
             {fltk::Item* o = new fltk::Item("double stance");
              o->callback((fltk::Callback*)cb_double);
            }
             {fltk::Item* o = new fltk::Item("left foot");
              o->callback((fltk::Callback*)cb_left);
            }
             {fltk::Item* o = new fltk::Item("right foot");
              o->callback((fltk::Callback*)cb_right);
            }
             {fltk::Item* o = new fltk::Item("Load Defaults");
              o->callback((fltk::Callback*)cb_Load);
            }
             {fltk::Item* o = new fltk::Item("Fun");
              o->callback((fltk::Callback*)cb_Fun);
              o->tooltip("Drop a few balls on our unsuspecting victim..");
            }
            o->end();
          }
          o->end();
        }
         {fltk::Group* o = new fltk::Group(0, 60, 285, 755);
          o->set_vertical();
          o->box(fltk::DOWN_BOX);
          o->color((fltk::Color)0xb6b6b600);
          o->begin();
           {fltk::TabGroup* o = ui_main_tab = new fltk::TabGroup(0, 0, 280, 755);
            o->set_vertical();
            o->box(fltk::DOWN_BOX);
            o->color((fltk::Color)0xc5c5c500);
            o->begin();
             {fltk::Group* o = new fltk::Group(0, 20, 270, 725, "Controllers");
              o->set_vertical();
              o->labelfont(fltk::HELVETICA_BOLD);
              o->labelsize(11);
              o->textsize(11);
              o->begin();
               {fltk::Group* o = new fltk::Group(15, 85, 250, 125, "Velocity Controller");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("Virtual control of the COM of the character");
                o->begin();
                 {fltk::CheckButton* o = ui_useComJ = new fltk::CheckButton(10, 20, 25, 25, "vcont");
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_useComJ);
                }
                 {fltk::InvisibleBox* o = new fltk::InvisibleBox(80, 25, 75, 85, "Sagital");
                  o->set_vertical();
                  o->box(fltk::DOWN_BOX);
                  o->buttonbox(fltk::NO_BOX);
                  o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                }
                 {fltk::ValueInput* o = ui_jkp = new fltk::ValueInput(115, 45, 35, 20, "jk_P");
                  o->maximum(100);
                  o->step(0.1);
                  o->value(15);
                  o->callback((fltk::Callback*)cb_ui_jkp);
                }
                 {fltk::ValueInput* o = ui_jkd = new fltk::ValueInput(115, 65, 35, 20, "jk_D");
                  o->maximum(100);
                  o->step(0.1);
                  o->value(5);
                  o->callback((fltk::Callback*)cb_ui_jkd);
                }
                 {fltk::InvisibleBox* o = new fltk::InvisibleBox(155, 25, 70, 85, "Coronal");
                  o->set_vertical();
                  o->box(fltk::DOWN_BOX);
                  o->buttonbox(fltk::NO_BOX);
                  o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                }
                 {fltk::ValueInput* o = ui_jkpc = new fltk::ValueInput(190, 45, 35, 20, "jk_P");
                  o->maximum(100);
                  o->step(0.1);
                  o->value(25);
                  o->callback((fltk::Callback*)cb_ui_jkpc);
                }
                 {fltk::ValueInput* o = ui_jkdc = new fltk::ValueInput(190, 65, 35, 20, "jk_D");
                  o->maximum(100);
                  o->step(0.1);
                  o->value(5);
                  o->callback((fltk::Callback*)cb_ui_jkdc);
                }
                 {fltk::ValueInput* o = ui_vs = new fltk::ValueInput(115, 85, 35, 20, "Vz");
                  o->maximum(10);
                  o->step(0.1);
                  o->callback((fltk::Callback*)cb_ui_vs);
                }
                 {fltk::ValueInput* o = ui_vc = new fltk::ValueInput(190, 85, 35, 20, "Vx");
                  o->maximum(10);
                  o->step(0.1);
                  o->callback((fltk::Callback*)cb_ui_vc);
                }
                 {fltk::CheckButton* o = ui_useBubbleT = new fltk::CheckButton(10, 45, 25, 25, "bub");
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_useBubbleT);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(15, 220, 250, 140, "Walk");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("make the character walk around");
                o->begin();
                 {fltk::Dial* o = ui_walk_dir = new fltk::Dial(10, 10, 68, 65);
                  o->minimum(-1);
                  o->callback((fltk::Callback*)cb_ui_walk_dir);
                }
                 {fltk::LightButton* o = ui_walk = new fltk::LightButton(15, 75, 55, 25, "Walk");
                  o->callback((fltk::Callback*)cb_ui_walk);
                }
                 {fltk::ValueSlider* o = ui_walk_speed = new fltk::ValueSlider(150, 50, 90, 15, "Walk Speed");
                  o->maximum(10);
                  o->value(0.01);
                  o->callback((fltk::Callback*)cb_ui_walk_speed);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::CheckButton* o = ui_arrow = new fltk::CheckButton(175, 105, 25, 25, "arrow");
                  o->callback((fltk::Callback*)cb_ui_arrow);
                }
                 {fltk::ValueSlider* o = ui_step_dist = new fltk::ValueSlider(150, 20, 90, 15, "Step Dist");
                  o->maximum(10);
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_step_dist);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_step_height = new fltk::ValueSlider(150, 35, 90, 15, "Step Height");
                  o->maximum(10);
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_step_height);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_step_speed = new fltk::ValueSlider(150, 65, 90, 15, "Step Speed");
                  o->maximum(10);
                  o->value(0.01);
                  o->callback((fltk::Callback*)cb_ui_step_speed);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Group* o = ui_message = new fltk::Group(55, 115, 115, 20, "Doesn't Work Yet");
                  o->box(fltk::FLAT_BOX);
                  o->labelfont(fltk::HELVETICA_BOLD);
                  o->textfont(fltk::HELVETICA_BOLD);
                  o->color((fltk::Color)0xd3d3d300);
                  o->textcolor((fltk::Color)0xa7000000);
                  o->labelcolor((fltk::Color)0xbd000000);
                  o->labelsize(11);
                  o->textsize(11);
                  o->align(fltk::ALIGN_INSIDE);
                }
                 {fltk::ValueSlider* o = ui_walk_sway = new fltk::ValueSlider(150, 80, 90, 15, "Hip Sway");
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_walk_sway);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_walk_hheight = new fltk::ValueSlider(150, 95, 90, 15, "Hip Height");
                  o->minimum(3);
                  o->maximum(4.2);
                  o->step(0.05);
                  o->value(4.15);
                  o->callback((fltk::Callback*)cb_ui_walk_hheight);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Button* o = new fltk::Button(15, 105, 35, 25, "Step");
                  o->callback((fltk::Callback*)cb_Step);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(15, 15, 250, 60);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->tooltip("Random Stuff");
                o->begin();
                 {fltk::CheckButton* o = ui_useGravC = new fltk::CheckButton(10, 30, 25, 25, "gravC");
                  o->callback((fltk::Callback*)cb_ui_useGravC);
                }
                 {fltk::CheckButton* o = ui_usePID = new fltk::CheckButton(10, 10, 25, 25, "Reference");
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_usePID);
                }
                 {fltk::Button* o = new fltk::Button(210, 10, 35, 20, "rest");
                  o->callback((fltk::Callback*)cb_rest);
                  o->tooltip("This applies a force to each of the bodies opposite its velocity.. use with c\
aution ;-)");
                }
                 {fltk::ValueInput* o = ui_kg = new fltk::ValueInput(82, 33, 30, 20, "G");
                  o->step(0.1);
                  o->value(0.3);
                  o->callback((fltk::Callback*)cb_ui_kg);
                }
                 {fltk::CheckButton* o = ui_collide_feet_only = new fltk::CheckButton(95, 10, 25, 25, "Feet Only");
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_collide_feet_only);
                  o->tooltip("Disables collision on all bodies except feet toes and ground");
                }
                 {fltk::CheckButton* o = ui_root_manip = new fltk::CheckButton(125, 30, 25, 25, "Manip");
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_root_manip);
                  o->tooltip("Allow the user control over the IK root.. can be dangerous");
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(15, 380, 250, 95, "Contact");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("Change how the character is standing");
                o->begin();
                 {fltk::Group* o = ui_stepState = new fltk::Group(25, 70, 210, 20, "text");
                  o->box(fltk::FLAT_BOX);
                  o->labelfont(fltk::HELVETICA_BOLD);
                  o->textfont(fltk::HELVETICA_BOLD);
                  o->textcolor((fltk::Color)0xa7000000);
                  o->labelcolor((fltk::Color)0xbd000000);
                  o->labelsize(11);
                  o->textsize(11);
                  o->align(fltk::ALIGN_INSIDE);
                }
                 {fltk::Button* o = new fltk::Button(40, 20, 65, 25, "Left Foot");
                  o->callback((fltk::Callback*)cb_Left);
                }
                 {fltk::Button* o = new fltk::Button(170, 20, 65, 25, "Right Foot");
                  o->callback((fltk::Callback*)cb_Right);
                }
                 {fltk::Button* o = new fltk::Button(105, 20, 65, 25, "Both Feet");
                  o->callback((fltk::Callback*)cb_Both);
                }
                 {fltk::Button* o = new fltk::Button(40, 45, 65, 25, "Toes");
                  o->callback((fltk::Callback*)cb_Toes);
                }
                 {fltk::Button* o = new fltk::Button(105, 45, 65, 25, "Heel");
                  o->callback((fltk::Callback*)cb_Heel);
                }
                 {fltk::Button* o = new fltk::Button(170, 45, 65, 25, "Fixed");
                  o->callback((fltk::Callback*)cb_Fixed);
                }
                 {fltk::CheckButton* o = ui_contactVis = new fltk::CheckButton(10, 5, 25, 25, "vis");
                  o->callback((fltk::Callback*)cb_ui_contactVis);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(15, 485, 250, 155, "Configurations");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("Load different configurations for the controllers");
                o->begin();
                 {fltk::MultiBrowser* o = ui_config_browser = new fltk::MultiBrowser(20, 30, 215, 65);
                  o->type(fltk::MultiBrowser::MULTI);
                  o->callback((fltk::Callback*)cb_ui_config_browser);
                }
                 {fltk::Button* o = new fltk::Button(60, 100, 40, 20, "save");
                  o->callback((fltk::Callback*)cb_save);
                }
                 {fltk::Button* o = new fltk::Button(20, 120, 40, 20, "update");
                  o->callback((fltk::Callback*)cb_update);
                }
                 {fltk::Button* o = new fltk::Button(20, 100, 40, 20, "load");
                  o->callback((fltk::Callback*)cb_load);
                }
                 {fltk::Button* o = new fltk::Button(60, 120, 40, 20, "delete");
                  o->callback((fltk::Callback*)cb_delete);
                }
                ui_current_parm = new fltk::Input(115, 110, 105, 25);
                o->end();
              }
               {fltk::Group* o = new fltk::Group(15, 650, 250, 75, "Root");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("This Controller Attempts to keep the hips and the swing leg relative to a glo\
bal coordinate system");
                o->begin();
                 {fltk::CheckButton* o = ui_use_root = new fltk::CheckButton(20, 30, 25, 25, "root");
                  o->callback((fltk::Callback*)cb_ui_use_root);
                }
                 {fltk::ValueInput* o = ui_root_kp = new fltk::ValueInput(85, 20, 45, 25, "kp");
                  o->value(0.8);
                  o->callback((fltk::Callback*)cb_ui_root_kp);
                }
                 {fltk::ValueInput* o = ui_root_kd = new fltk::ValueInput(190, 20, 45, 25, "kd");
                  o->value(0.1);
                  o->callback((fltk::Callback*)cb_ui_root_kd);
                }
                 {fltk::ValueInput* o = ui_root_maxV = new fltk::ValueInput(85, 45, 45, 25, "maxV");
                  o->value(3);
                  o->callback((fltk::Callback*)cb_ui_root_maxV);
                }
                 {fltk::ValueInput* o = ui_root_damp = new fltk::ValueInput(190, 45, 45, 25, "rootDamp");
                  o->value(3);
                  o->callback((fltk::Callback*)cb_ui_root_damp);
                }
                o->end();
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(10, 25, 270, 725, "Skel");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 45, 240, 360, "skel pid");
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->buttonbox(fltk::DOWN_BOX);
                o->color((fltk::Color)0xcacaca00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::ValueSlider* o = ui_jnt[0] = new fltk::ValueSlider(90, 65, 145, 15, "L Shoulder X");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[1] = new fltk::ValueSlider(90, 80, 145, 15, "L Shoulder Z");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt1);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[2] = new fltk::ValueSlider(90, 95, 145, 15, "R Shoulder X");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt2);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[3] = new fltk::ValueSlider(90, 110, 145, 15, "R Shoulder Z");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt3);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[4] = new fltk::ValueSlider(90, 125, 145, 15, "L Elbow");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt4);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[5] = new fltk::ValueSlider(90, 141, 145, 15, "R Elbow");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt5);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[6] = new fltk::ValueSlider(90, 156, 145, 15, "L Hip X");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt6);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[7] = new fltk::ValueSlider(90, 171, 145, 15, "L Hip Z");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt7);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[8] = new fltk::ValueSlider(90, 186, 145, 15, "R Hip X");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt8);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[9] = new fltk::ValueSlider(90, 202, 145, 15, "R Hip Z");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt9);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[10] = new fltk::ValueSlider(90, 217, 145, 15, "L Knee");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnta);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[11] = new fltk::ValueSlider(90, 232, 145, 15, "R Knee");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jntb);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[12] = new fltk::ValueSlider(90, 247, 145, 15, "L Ankle");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jntc);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[13] = new fltk::ValueSlider(90, 263, 145, 15, "R Ankle");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jntd);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[14] = new fltk::ValueSlider(90, 278, 145, 15, "Neck");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnte);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[15] = new fltk::ValueSlider(90, 293, 145, 15, "Spine X");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jntf);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[16] = new fltk::ValueSlider(90, 308, 145, 15, "Spine Z");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt10);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[17] = new fltk::ValueSlider(90, 320, 145, 15, "Spine 2 X");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt11);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[18] = new fltk::ValueSlider(90, 335, 145, 15, "Spine 2 Z");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt12);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[19] = new fltk::ValueSlider(90, 350, 145, 15, "Left Toe");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt13);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jnt[20] = new fltk::ValueSlider(90, 365, 145, 15, "Right Toe");
                o->minimum(-200);
                o->maximum(200);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_jnt14);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_showSkel = new fltk::CheckButton(20, 0, 25, 25, "Skel Visible");
                o->callback((fltk::Callback*)cb_ui_showSkel);
              }
               {fltk::CheckButton* o = ui_shaded = new fltk::CheckButton(20, 20, 25, 25, "Models Shaded");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_shaded);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 30, 270, 725, "Joint");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::MultiBrowser* o = ui_jointList = new fltk::MultiBrowser(25, 40, 195, 285, "Joint");
                o->type(fltk::MultiBrowser::MULTI);
                o->set_vertical();
                o->callback((fltk::Callback*)cb_ui_jointList);
              }
               {fltk::ValueSlider* o = ui_jointP = new fltk::ValueSlider(40, 345, 175, 20, "P");
                o->maximum(5);
                o->step(0.001);
                o->value(0.3);
                o->callback((fltk::Callback*)cb_ui_jointP);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointD = new fltk::ValueSlider(40, 360, 175, 20, "D");
                o->maximum(0.1);
                o->step(0.0001);
                o->value(0.01);
                o->callback((fltk::Callback*)cb_ui_jointD);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_jointGrav = new fltk::CheckButton(39, 382, 175, 20, "Gravity Compensate");
                o->callback((fltk::Callback*)cb_ui_jointGrav);
              }
               {fltk::CheckButton* o = ui_jointPD = new fltk::CheckButton(40, 400, 175, 20, "PD");
                o->callback((fltk::Callback*)cb_ui_jointPD);
              }
               {fltk::Button* o = new fltk::Button(35, 515, 80, 20, "Save");
                o->callback((fltk::Callback*)cb_Save);
              }
               {fltk::Button* o = new fltk::Button(125, 515, 80, 20, "Load");
                o->callback((fltk::Callback*)cb_Load1);
              }
               {fltk::CheckButton* o = ui_jointVf = new fltk::CheckButton(40, 420, 175, 20, "vforce");
                o->callback((fltk::Callback*)cb_ui_jointVf);
              }
               {fltk::ValueSlider* o = ui_jointJX = new fltk::ValueSlider(35, 440, 175, 20, "jX");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointJX);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointJY = new fltk::ValueSlider(35, 460, 175, 20, "jY");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointJY);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointJZ = new fltk::ValueSlider(35, 480, 175, 20, "jZ");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointJZ);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::Group* o = ui_multiSelect = new fltk::Group(30, 0, 191, 25);
                o->box(fltk::FLAT_BOX);
                o->labelfont(fltk::HELVETICA_BOLD);
                o->textfont(fltk::HELVETICA_BOLD);
                o->color((fltk::Color)0xb6b6b600);
                o->textcolor((fltk::Color)0xa7000000);
                o->labelcolor((fltk::Color)0xbd000000);
                o->labelsize(11);
                o->textsize(11);
                o->align(fltk::ALIGN_INSIDE);
              }
              o->end();
            }
            o->end();
            fltk::Group::current()->resizable(o);
          }
          o->end();
          fltk::Group::current()->resizable(o);
        }
         {fltk::LightButton* o = ui_ode_run = new fltk::LightButton(32, 25, 112, 30, "Run Sim");
          o->set_flag(fltk::STATE);
          o->callback((fltk::Callback*)cb_ui_ode_run);
        }
         {fltk::Button* o = new fltk::Button(170, 25, 105, 30, "Reset Sim");
          o->callback((fltk::Callback*)cb_Reset);
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}
